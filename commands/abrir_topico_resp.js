const { SlashCommandBuilder, ChannelType } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('abrir_topico_resp')
        .setDescription('Abre um novo t√≥pico e j√° o atribui a um respons√°vel.')
        .addStringOption(option =>
            option.setName('iniciais')
                .setDescription('As 2 primeiras letras do nome do respons√°vel (ex: AB).')
                .setRequired(true)
                .setMinLength(2)
                .setMaxLength(2))
        .addStringOption(option =>
            option.setName('titulo')
                .setDescription('O t√≠tulo do t√≥pico (m√°ximo 89 caracteres, incluindo prefixo).')
                .setRequired(true)
                .setMaxLength(89))
        .addStringOption(option =>
            option.setName('mensagem')
                .setDescription('A mensagem inicial do t√≥pico.')
                .setRequired(true)),
    async execute(interaction) {
        // In√≠cio do "loading": Adia a resposta, vis√≠vel apenas para o usu√°rio que digitou o comando
        await interaction.deferReply({ flags: 64 }); // flags: 64 para ser ef√™mero

        const iniciais = interaction.options.getString('iniciais').toUpperCase();
        const titulo = interaction.options.getString('titulo');
        const mensagem = interaction.options.getString('mensagem');

        if (interaction.channel.type !== ChannelType.GuildText && interaction.channel.type !== ChannelType.GuildForum) {
            // Edita a resposta adiada com a mensagem de erro
            return interaction.editReply({ content: 'Este comando s√≥ pode ser usado em canais de texto ou f√≥runs.' });
        }
        
        const threadTitle = `üü° [${iniciais}] - ${titulo}`;

        try {
            // Opcional: Mostrar uma mensagem de "carregando" mais descritiva
            await interaction.editReply({ content: '‚è≥ Criando e atribuindo o t√≥pico...' });

            // PASSO 1: Criar o t√≥pico SEM a propriedade 'message'
            const newThread = await interaction.channel.threads.create({
                name: threadTitle,
                type: ChannelType.PublicThread,
                reason: `T√≥pico aberto e atribu√≠do a ${iniciais} por ${interaction.user.tag}`,
            });

            // PASSO 2: Enviar a mensagem separadamente para o t√≥pico rec√©m-criado
            await newThread.send(mensagem);

            // Edita a resposta adiada com a mensagem de sucesso.
            // A mensagem final aqui ser√° P√öBLICA (n√£o ef√™mera), pois √© um aviso de sucesso.
            await interaction.editReply({ content: `T√≥pico '${newThread.name}' criado e atribu√≠do a **${iniciais}** em ${newThread.toString()}!` });
        } catch (error) {
            console.error('Erro ao criar t√≥pico com respons√°vel:', error);
            if (error.code === 50013) {
                // Edita a resposta adiada com a mensagem de erro de permiss√£o
                await interaction.editReply({ content: 'N√£o tenho permiss√£o para criar t√≥picos neste canal. Verifique as permiss√µes do bot.' });
            } else {
                // Edita a resposta adiada com a mensagem de erro geral
                await interaction.editReply({ content: `Ocorreu um erro ao criar o t√≥pico: ${error.message}` });
            }
        }
    },
};